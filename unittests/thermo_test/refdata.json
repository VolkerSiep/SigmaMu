{
  "contribution_test.py::test_GibbsIdealGas": {
    "S": [
      "(S_im-((n_0+n_1)*(8.31446*log((p/p_ref)))))"
    ],
    "V": [
      "(((8.31446*(n_0+n_1))*T)/p)"
    ],
    "mu": [
      "(mu_im+(T*(8.31446*log((p/p_ref)))))"
    ]
  },
  "contribution_test.py::test_H0S0ReferenceState": {
    "S": "((s_0.A*n_0)+(s_0.B*n_1))",
    "mu": "[(dh_form.A-(T*s_0.A)), (dh_form.B-(T*s_0.B))]"
  },
  "contribution_test.py::test_IdealMix": {
    "S": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "(S_std-((n_0*(@1*log((n_0/@2))))+(n_1*(@1*log((n_1/@2))))))"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "[(mu_std+(T*(@1*log((n_0/@2)))))",
      "(mu_std+(T*(@1*log((n_1/@2)))))]"
    ]
  },
  "contribution_test.py::test_LinearHeatCapacity": {
    "S": [
      "@1=log((T/T_ref))",
      "@2=(T-T_ref)",
      "(S_ref+(((((cp_a.A-(cp_b.A*T_ref))*@1)+(cp_b.A*@2))*n_0)+((((cp_a.B-(cp_b.B*T_ref))*@1)+(cp_b.B*@2))*n_1)))"
    ],
    "mu": [
      "@1=(T-T_ref)",
      "@2=(0.5*@1)",
      "@3=log((T/T_ref))",
      "[(mu_ref+(((cp_a.A+(@2*cp_b.A))*@1)-(T*(((cp_a.A-(cp_b.A*T_ref))*@3)+(cp_b.A*@1)))))",
      "(mu_ref+(((cp_a.B+(@2*cp_b.B))*@1)-(T*(((cp_a.B-(cp_b.B*T_ref))*@3)+(cp_b.B*@1)))))]"
    ]
  },
  "contribution_test.py::test_ideal_mix": {
    "S": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "(S_std-((n_0*(@1*log((n_0/@2))))+(n_1*(@1*log((n_1/@2))))))"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "[(mu_std+(T*(@1*log((n_0/@2)))))",
      "(mu_std+(T*(@1*log((n_1/@2)))))]"
    ]
  },
  "cubic_test.py::test_BostonMathiasAlphaFunction": "@1=1, @2=(T/T_c_0), @3=((@1<@2)==0), @4=sqrt(@2), @5=(m_0+(0.3*eta.A)), @6=((@1+@5)+((4*eta.A)/@5)), sq(((@3?((@1+(m_0*(@1-@4)))-((eta.A*(@1-@4))*(0.7-@2))):0)+((!@3)?exp(((@5/@6)*(@1-pow(@4,@6)))):0)))",
  "cubic_test.py::test_NonSymmmetricMixingRule": "@1=(sqrt(a_i_0)*n_0), @2=(sqrt(a_i_1)*n_1), @3=(sqrt(a_i_2)*n_2), @4=2, @5=((@4*@1)*@2), @6=(@4/((n_0+n_1)+n_2)), (((((sq(((@1+@2)+@3))-(@5*k_1_AB))-(((@4*@1)*@3)*k_1_AC))-((@5*k_2_AB)*(1-(T/T_ref))))-((((@6*@2)*@1)*(n_1-n_0))*k_1_AB))-((((@6*@3)*@2)*(n_2-n_1))*k_1_AB))",
  "cubic_test.py::test_RedlichKwongEOS": {
    "S": "@1=(V+C0), @2=(B0+(T*dBdT)), @3=(@1-@2), @4=((A0+(T*dAdT))/@2), @5=(@1+@2), (S-((((8.31446*(n_0+n_1))*(log((V/@3))+((T*dBdT)/@3)))+(((dAdT-(@4*dBdT))/@2)*log((@1/@5))))-(@4*(dBdT/@5))))",
    "mu": "@1=(8.31446*T), @2=log((V/((V+C0)-(B0+(T*dBdT))))), [(mu_0+(@1*@2)), (mu_1+(@1*@2))]",
    "p": "@1=(V+C0), @2=(B0+(T*dBdT)), (p-((((8.31446*(n_0+n_1))*T)*((1./V)-(1./(@1-@2))))+((A0+(T*dAdT))/(@1*(@1+@2)))))"
  },
  "cubic_test.py::test_critical_parameters": {
    "T_c": "[T_c.A, T_c.B]",
    "omega": "[omega.A, omega.B]",
    "p_c": "[p_c.A, p_c.B]"
  },
  "cubic_test.py::test_linear_mixing_rule": "((c_i.A*n_0)+(c_i.B*n_1))",
  "cubic_test.py::test_linear_peneloux_volume_shift": "((c_i.A*n_0)+(c_i.B*n_1))",
  "cubic_test.py::test_redlich_kwong_a_function": "@1=29.5518, [(((@1*alpha_0)*sq(T_c_0))/p_c_0), (((@1*alpha_1)*sq(T_c_1))/p_c_1)]",
  "cubic_test.py::test_redlich_kwong_b_function": "@1=0.720368, [((@1*T_c_0)/p_c_0), ((@1*T_c_1)/p_c_1)]",
  "cubic_test.py::test_rk_m_factor": "@1=0.48508, @2=1.55171, @3=0.15613, [(@1+((@2-(@3*w_0))*w_0)), (@1+((@2-(@3*w_1))*w_1))]",
  "frame_test.py::test_parameter_names": [
    "H0S0ReferenceState.T_ref",
    "H0S0ReferenceState.dh_form.N2",
    "H0S0ReferenceState.dh_form.O2",
    "H0S0ReferenceState.p_ref",
    "H0S0ReferenceState.s_0.N2",
    "H0S0ReferenceState.s_0.O2",
    "LinearHeatCapacity.cp_a.N2",
    "LinearHeatCapacity.cp_a.O2",
    "LinearHeatCapacity.cp_b.N2",
    "LinearHeatCapacity.cp_b.O2"
  ],
  "frame_test.py::test_parameter_structure": {
    "H0S0ReferenceState": {
      "T_ref": null,
      "dh_form": {
        "N2": null,
        "O2": null
      },
      "p_ref": null,
      "s_0": {
        "N2": null,
        "O2": null
      }
    },
    "LinearHeatCapacity": {
      "cp_a": {
        "N2": null,
        "O2": null
      },
      "cp_b": {
        "N2": null,
        "O2": null
      }
    }
  },
  "frame_test.py::test_property_names": [
    "S",
    "S_std",
    "T",
    "T_ref",
    "V",
    "mu",
    "mu_std",
    "n",
    "p_ref",
    "p_std",
    "state"
  ],
  "special_test.py::test_derivative": "((T*C_2)+(C_1+(C_2*T)))"
}