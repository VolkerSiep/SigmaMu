{
  "contribution_test.py::test_gibbs_ideal_gas": {
    "S": [
      "(S_im-((n_0+n_1)*(8.31446*log((p/p_ref))))) kilogram * meter ** 2 / kelvin / second ** 2"
    ],
    "V": [
      "(((8.31446*(n_0+n_1))*T)/p) joule * meter * second ** 2 / kilogram"
    ],
    "mu": [
      "@1=(T*(8.31446*log((p/p_ref))))",
      "[(mu_im_0+@1)",
      "(mu_im_1+@1)] kilogram * meter ** 2 / mole / second ** 2"
    ]
  },
  "contribution_test.py::test_h0s0_reference_state": {
    "par_names": [
      "s_0",
      "dh_form",
      "T_ref",
      "p_ref"
    ],
    "res": {
      "S": "((s_0.A*n_0)+(s_0.B*n_1)) kilogram * meter ** 2 / kelvin / second ** 2",
      "mu": "[(dh_form.A-(T*s_0.A)), (dh_form.B-(T*s_0.B))] kilogram * meter ** 2 / mole / second ** 2"
    }
  },
  "contribution_test.py::test_helmholtz_ideal_gas": {
    "S": [
      "@1=(n_0+n_1)",
      "@2=8.31446",
      "(S_im-(@1*(@2*log(((((@2*@1)*T)/V)/p_ref))))) kilogram * meter ** 2 / kelvin / second ** 2"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(T*(@1*log(((((@1*(n_0+n_1))*T)/V)/p_ref))))",
      "[(mu_im_0+@2)",
      "(mu_im_1+@2)] kilogram * meter ** 2 / mole / second ** 2"
    ],
    "p": [
      "(((8.31446*(n_0+n_1))*T)/V) joule / meter ** 3"
    ]
  },
  "contribution_test.py::test_ideal_mix": {
    "S": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "(S_std-((n_0*(@1*log((n_0/@2))))+(n_1*(@1*log((n_1/@2)))))) kilogram * meter ** 2 / kelvin / second ** 2"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "[(mu_std_0+(T*(@1*log((n_0/@2)))))",
      "(mu_std_1+(T*(@1*log((n_1/@2)))))] kilogram * meter ** 2 / mole / second ** 2"
    ]
  },
  "contribution_test.py::test_linear_heat_capacity": {
    "S": [
      "@1=log((T/T_ref))",
      "@2=(T-T_ref)",
      "(S_ref+(((((cp_a.A-(cp_b.A*T_ref))*@1)+(cp_b.A*@2))*n_0)+((((cp_a.B-(cp_b.B*T_ref))*@1)+(cp_b.B*@2))*n_1))) kilogram * meter ** 2 / kelvin / second ** 2"
    ],
    "mu": [
      "@1=(T-T_ref)",
      "@2=(0.5*@1)",
      "@3=log((T/T_ref))",
      "[(mu_ref_0+(((cp_a.A+(@2*cp_b.A))*@1)-(T*(((cp_a.A-(cp_b.A*T_ref))*@3)+(cp_b.A*@1)))))",
      "(mu_ref_1+(((cp_a.B+(@2*cp_b.B))*@1)-(T*(((cp_a.B-(cp_b.B*T_ref))*@3)+(cp_b.B*@1)))))] kilogram * meter ** 2 / mole / second ** 2"
    ]
  },
  "cubic_test.py::test_boston_mathias_alpha_function": "@1=1, @2=(T/T_c_0), @3=((@1<@2)==0), @4=sqrt(@2), @5=(m_0+(0.3*eta.A)), @6=((@5+@1)+((4*eta.A)/@5)), sq(((@3?((@1-(m_0*(@4-@1)))-((eta.A*(@4-@1))*(@2-0.7))):0)+((!@3)?exp((-((@5/@6)*(pow(@4,@6)-@1)))):0)))",
  "cubic_test.py::test_critical_parameters": {
    "T_c": "[T_c.A, T_c.B] K",
    "omega": "[omega.A, omega.B]",
    "p_c": "[p_c.A, p_c.B] kg / m / s ** 2"
  },
  "cubic_test.py::test_linear_mixing_rule": [
    "((c_i.A*n_0)+(c_i.B*n_1)) m ** 3",
    {
      "c_i": {
        "A": "c_i.A m ** 3 / mol",
        "B": "c_i.B m ** 3 / mol"
      }
    }
  ],
  "cubic_test.py::test_non_symmmetric_mixing_rule": "@1=(sqrt(a_i_0)*n_0), @2=(sqrt(a_i_1)*n_1), @3=(sqrt(a_i_2)*n_2), @4=-2, @5=(@1*@2), ((sq(((@1+@2)+@3))+(@4*(((@5*k_1.A.B)+((@1*@3)*k_1.A.C))-(((T/T_ref)-1)*(@5*k_2.A.B)))))+((@4/((n_0+n_1)+n_2))*((((@2*@1)*(n_1-n_0))*l_1.B.A)+(((@3*@2)*(n_2-n_1))*l_1.C.B)))) kg * m ** 5 * mol / s ** 2",
  "cubic_test.py::test_redlich_kwong_a_function": "@1=29.5518, [(((@1*alpha_0)*sq(T_c_0))/p_c_0), (((@1*alpha_1)*sq(T_c_1))/p_c_1)] J ** 2 * m * s ** 2 / kg / mol ** 2",
  "cubic_test.py::test_redlich_kwong_b_function": "@1=0.720368, [((@1*T_c_0)/p_c_0), ((@1*T_c_1)/p_c_1)] J * m * s ** 2 / kg / mol",
  "cubic_test.py::test_redlich_kwong_eos": {
    "S": "@1=(V+C0), @2=(B0+(T*dBdT)), @3=(@1-@2), @4=((A0+(T*dAdT))/@2), @5=(@1+@2), (S-((((8.31446*(n_0+n_1))*(log((V/@3))+((T*dBdT)/@3)))+(((dAdT-(@4*dBdT))/@2)*log((@1/@5))))-(@4*(dBdT/@5)))) kg * m ** 2 / K / s ** 2",
    "VBC": "((V+C0)-(B0+(T*dBdT))) m ** 3",
    "ceos_a_T": "dAdT kg * m ** 5 / K / s ** 2",
    "ceos_b_T": "dBdT m ** 3 / K",
    "dp_dV": "@1=(V+C0), @2=(B0+(T*dBdT)), @3=(@1-@2), @4=(@1+@2), @5=(@1*@4), (-((((8.31446*(n_0+n_1))*T)*(((1./@3)/@3)-((1./V)/V)))-((((A0+(T*dAdT))/@5)/@5)*(@4+@1)))) kg / m ** 4 / s ** 2",
    "mu": "@1=(8.31446*T), @2=log((V/((V+C0)-(B0+(T*dBdT))))), [(mu_0+(@1*@2)), (mu_1+(@1*@2))] kg * m ** 2 / mol / s ** 2",
    "p": "@1=(V+C0), @2=(B0+(T*dBdT)), (p-((((8.31446*(n_0+n_1))*T)*((1./V)-(1./(@1-@2))))+((A0+(T*dAdT))/(@1*(@1+@2))))) kg / m / s ** 2"
  },
  "cubic_test.py::test_rk_m_factor": "@1=0.48508, @2=0.15613, @3=1.55171, [(@1-(((@2*w_0)-@3)*w_0)), (@1-(((@2*w_1)-@3)*w_1))]",
  "frame_test.py::test_call_frame": {
    "S": "19.69280941623939 kg * m ** 2 / K / s ** 2",
    "mu": "[-1486.852957088782 -1360.2165589869312] kg * m ** 2 / mol / s ** 2"
  },
  "frame_test.py::test_initial_state": 0.049579140592047766,
  "frame_test.py::test_parameter_names": [
    "H0S0ReferenceState.T_ref",
    "H0S0ReferenceState.dh_form.N2",
    "H0S0ReferenceState.dh_form.O2",
    "H0S0ReferenceState.p_ref",
    "H0S0ReferenceState.s_0.N2",
    "H0S0ReferenceState.s_0.O2",
    "LinearHeatCapacity.cp_a.N2",
    "LinearHeatCapacity.cp_a.O2",
    "LinearHeatCapacity.cp_b.N2",
    "LinearHeatCapacity.cp_b.O2"
  ],
  "frame_test.py::test_parameter_structure": {
    "H0S0ReferenceState": {
      "T_ref": "K",
      "dh_form": {
        "N2": "kg * m ** 2 / mol / s ** 2",
        "O2": "kg * m ** 2 / mol / s ** 2"
      },
      "p_ref": "kg / m / s ** 2",
      "s_0": {
        "N2": "kg * m ** 2 / K / mol / s ** 2",
        "O2": "kg * m ** 2 / K / mol / s ** 2"
      }
    },
    "HelmholtzIdealGas": {},
    "IdealMix": {},
    "LinearHeatCapacity": {
      "cp_a": {
        "N2": "kg * m ** 2 / K / mol / s ** 2",
        "O2": "kg * m ** 2 / K / mol / s ** 2"
      },
      "cp_b": {
        "N2": "kg * m ** 2 / K ** 2 / mol / s ** 2",
        "O2": "kg * m ** 2 / K ** 2 / mol / s ** 2"
      }
    },
    "StandardState": {}
  },
  "frame_test.py::test_property_names": [
    "S",
    "S_std",
    "T",
    "T_ref",
    "V",
    "mu",
    "mu_std",
    "n",
    "p_ref",
    "p_std",
    "state"
  ],
  "frame_test.py::test_property_structure": {
    "S": "kg * m ** 2 / K / s ** 2",
    "S_std": "kg * m ** 2 / K / s ** 2",
    "T": "K",
    "T_ref": "K",
    "V": "m ** 3",
    "mu": "kg * m ** 2 / mol / s ** 2",
    "mu_std": "kg * m ** 2 / mol / s ** 2",
    "n": "mol",
    "p": "J / m ** 3",
    "p_ref": "kg / m / s ** 2",
    "p_std": "kg / m / s ** 2",
    "state": "dimless"
  },
  "special_test.py::test_derivative": "((tau*C_2)+(C_1+(C_2*tau))) dimensionless"
}