{
  "contribution_test.py::test_GibbsIdealGas": {
    "S": [
      "(S_im-((n_0+n_1)*(8.31446*log((p/p_ref)))))"
    ],
    "V": [
      "(((8.31446*(n_0+n_1))*T)/p)"
    ],
    "mu": [
      "(mu_im+(T*(8.31446*log((p/p_ref)))))"
    ]
  },
  "contribution_test.py::test_H0S0ReferenceState": {
    "S": "((s_0.A*n_0)+(s_0.B*n_1))",
    "mu": "[(dh_form.A-(T*s_0.A)), (dh_form.B-(T*s_0.B))]"
  },
  "contribution_test.py::test_IdealMix": {
    "S": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "(S_std-((n_0*(@1*log((n_0/@2))))+(n_1*(@1*log((n_1/@2))))))"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "[(mu_std+(T*(@1*log((n_0/@2)))))",
      "(mu_std+(T*(@1*log((n_1/@2)))))]"
    ]
  },
  "contribution_test.py::test_LinearHeatCapacity": {
    "S": [
      "@1=log((T/T_ref))",
      "@2=(T-T_ref)",
      "(S_ref+(((((cp_a.A-(cp_b.A*T_ref))*@1)+(cp_b.A*@2))*n_0)+((((cp_a.B-(cp_b.B*T_ref))*@1)+(cp_b.B*@2))*n_1)))"
    ],
    "mu": [
      "@1=(T-T_ref)",
      "@2=(0.5*@1)",
      "@3=log((T/T_ref))",
      "[(mu_ref+(((cp_a.A+(@2*cp_b.A))*@1)-(T*(((cp_a.A-(cp_b.A*T_ref))*@3)+(cp_b.A*@1)))))",
      "(mu_ref+(((cp_a.B+(@2*cp_b.B))*@1)-(T*(((cp_a.B-(cp_b.B*T_ref))*@3)+(cp_b.B*@1)))))]"
    ]
  },
  "contribution_test.py::test_ideal_mix": {
    "S": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "(S_std-((n_0*(@1*log((n_0/@2))))+(n_1*(@1*log((n_1/@2))))))"
    ],
    "mu": [
      "@1=8.31446",
      "@2=(n_0+n_1)",
      "[(mu_std+(T*(@1*log((n_0/@2)))))",
      "(mu_std+(T*(@1*log((n_1/@2)))))]"
    ]
  },
  "cubic_test.py::test_NonSymmmetricMixingRule": "@1=(sqrt(a_i_0)*n_0), @2=(sqrt(a_i_1)*n_1), @3=(sqrt(a_i_2)*n_2), @4=2, @5=((@4*@1)*@2), @6=(@4/((n_0+n_1)+n_2)), (((((sq(((@1+@2)+@3))-(@5*k_1_AB))-(((@4*@1)*@3)*k_1_AC))-((@5*k_2_AB)*(1-(T/T_ref))))-((((@6*@2)*@1)*(n_1-n_0))*k_1_AB))-((((@6*@3)*@2)*(n_2-n_1))*k_1_AB))",
  "cubic_test.py::test_RedlichKwongEOS": {
    "CEOS_C": "C0",
    "CEOS_C_T": "00",
    "CEOS_C_n": "[[00, 00]]",
    "RK_A": "(A0+(T*dAdT))",
    "RK_A_T": "dAdT",
    "RK_A_n": "[[00, 00]]",
    "RK_B": "(B0+(T*dBdT))",
    "RK_B_T": "dBdT",
    "RK_B_n": "[[00, 00]]",
    "T": "T",
    "n": "[n_0, n_1]"
  },
  "cubic_test.py::test_critical_parameters": {
    "OMEGA": "[OMEGA.A, OMEGA.B]",
    "P_C": "[P_C.A, P_C.B]",
    "T_C": "[T_C.A, T_C.B]"
  },
  "cubic_test.py::test_linear_peneloux_volume_shift": "((c_i.A*n_0)+(c_i.B*n_1))",
  "frame_test.py::test_parameter_names": [
    "H0S0 reference state.dh_form.N2",
    "H0S0 reference state.dh_form.O2",
    "H0S0 reference state.s_0.N2",
    "H0S0 reference state.s_0.O2",
    "H0S0 reference state.T_ref",
    "H0S0 reference state.p_ref",
    "Linear heat capacity.cp_a.N2",
    "Linear heat capacity.cp_a.O2",
    "Linear heat capacity.cp_b.N2",
    "Linear heat capacity.cp_b.O2"
  ],
  "frame_test.py::test_parameter_structure": {
    "H0S0 reference state": {
      "T_ref": null,
      "dh_form": {
        "N2": null,
        "O2": null
      },
      "p_ref": null,
      "s_0": {
        "N2": null,
        "O2": null
      }
    },
    "Helmholtz state": {},
    "Linear heat capacity": {
      "cp_a": {
        "N2": null,
        "O2": null
      },
      "cp_b": {
        "N2": null,
        "O2": null
      }
    },
    "Standard state": {}
  },
  "frame_test.py::test_property_names": [
    "state",
    "T",
    "V",
    "n",
    "S",
    "mu",
    "T_ref",
    "p_ref",
    "S_std",
    "p_std",
    "mu_std"
  ]
}