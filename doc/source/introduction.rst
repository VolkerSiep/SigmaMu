Introduction
============
Naming
------
The name ``SiMu`` [zi:m ä] superficially is an abbreviation for *simulation* or *simulator*, but it is also represented by the Greek letters

.. math::

    \Huge{\Sigma\mu}

This can be interpreted as the sum over chemical potentials. ``SiMu`` is built on the concept of canonical modeling, that is to represent the system's constraints in their natural form. The chemical potential, being the partial derivative of Gibbs energy with respect to molar quantities, is the natural way to describe chemical equilibrium, phase equilibrium, and driving forces.
The constraint is then expressed as a sum of chemical potentials, weighted by the stoichiometry of the process. One can write

.. math::

    \sum_{i\in\mathrm{educts}} \nu_i\mu_i \stackrel{\mathrm{equil.}}{=} \sum_{j\in\mathrm{products}} \nu_j\mu_j

This is much easier that dealing with equilibrium constants, Henry, fugacity and activity coefficients, and other constructs of thermodynamics that have been invented to facilitate simplified calculations with paper and pen.

Logo and history
----------------
``Simu`` is also the name of the goose, riding the python snake in the logo:

.. image:: figures/simu_logo.jpeg 

The goose was first alone, and I met it in Canada on a business trip. It had put a nest on a site that was scheduled for excavation. Due to protection laws, the project got delayed by 2 weeks and everybody was angry with the goose. At that time, I was writing in-house code for a custom process simulation in another project. My wife drew the first logo, which I included in the report - to tease the engineers on site.

.. image:: figures/goose.png

This in-house model was built on my phd work [Siepmann2006] and written with help of python, but the model was defined in text files with their own format. After the project, I decided to convert the software into a pure python library and thus make python itself the modelling language. This is when ``SiMu`` started to ride the python, and my wife created the logo above.

So what is SiMu?
----------------
``SiMu`` is a python library for chemical process modeling. It supports and strongly encourages **hierarchical modeling** of reusable modules. A module can be for instance a phase interface, a set of balance equations, represent a tray in a column, a unit operation, a process section or the entire process.

By being a **pure python library** ``SiMu`` supports and strongly encourages professional software development techniques for quality assurance. This includes unit testing, use of ``git`` (or other distributed versioning and control systems), and in-code documentation with ``sphinx`` and ``mathjac``. As such, models can be more maintainable and reusable, and one can work in teams on the development - just like in real software development.

``SiMu`` uses ``casadi`` [cite!!] to establish a symbolic representation of the entire model, then to be solved in an **equation oriented** manner. A tailor-made solver interacts with the model to adapt the step-length not to leave the model domain. With accurate derivatives being available, process optimization, parameter fitting, and data reconciliation are strong sides of the software.

Equation-oriented process modeling software brings the challenge of **good fault analysis** if the model is not posed correctly. ``SiMu`` analyses singular system matrices for the set of likely process variables involved in the fault. Starting values are clean ``json`` files that can easily be stored and modified, or generated by dedicated initialization tools for specific models.

``SiMu`` is as such **by design not interactive** and has **no graphical user interface**. Python however enables to interface the model in uncountable ways, for instance towards a spread-sheet calculator, with an own custom GUI (using a GUI toolkit library), or as a web-service towards an IoT platform. ``Simu`` is intended to run on MS Windows, Linux and MAC OS. Efficient deployment of models in Linux docker containers as web-servers is one attractive way to go.

``SiMu`` is a **custom modeling tool** and is as such not shipped with a wide library of generic unit operations. The concept is to develop the models from equation basis, but then reuse the modules to maximal degree.

``SiMu`` is developed for industrial use-cases. As such, **proprietary data is to be handled and encapsulated**. ``SiMu`` is designed to be slim by nature, but new python packages can be built on top to extend the basic functionality for instance with custom thermodynamic models - or just model parameters, reaction chemistry data, and in-house process models.

``SiMu`` is originally designed for lumped process modeling (flow-sheet modeling). Distributed systems must be discretized manually by the developer. However, 2D distributed systems have been successfully modeled, such as reactive absorption of gas into a falling laminar film, based on a Gibbs excess model to describe the liquid phase properties.
